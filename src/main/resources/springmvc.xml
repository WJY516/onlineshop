<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:bean="http://www.springframework.org/schema/bean" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="                                               
            http://www.springframework.org/schema/beans    
            http://www.springframework.org/schema/beans/spring-beans.xsd    
            http://www.springframework.org/schema/context     
            http://www.springframework.org/schema/context/spring-context.xsd    
            http://www.springframework.org/schema/tx   
            http://www.springframework.org/schema/tx/spring-tx.xsd  
            http://www.springframework.org/schema/aop  
            http://www.springframework.org/schema/aop/spring-aop.xsd 
            http://www.springframework.org/schema/mvc  
            http://www.springframework.org/schema/mvc/spring-mvc.xsd ">

	<context:component-scan base-package="com"/>


	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- 相当于是配置了 两个request handldermapping HandlerAdapter -->
	<mvc:annotation-driven></mvc:annotation-driven>

	<!-- 当访问静态资源, 将请求 交给默认的 default -->
	<mvc:default-servlet-handler />


	<!--multipart解析器 -->
	<!-- 从 post 类型的 请求 中将 文件的 二进制解析成参数的 格式 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="1000000"></property>
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driver}"></property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>



	<!-- 让容器 管理SQLSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:sqlMapConfig.xml"></property>
	</bean>

	<!-- 使用Bean工厂管理 Mybatis的 Mapper接口实现类 -->
	<!-- 创建sqlsession并获得某一个接口的 代理对象 -->
	<!-- <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean" 
		> <property name="mapperInterface" value="com.neusoft.dao.TUserMapper"></property> 
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property> </bean> -->

	<!-- 解决多个Mapper 重复定义 的问题 扫描指定的包下面的 Mapper.java接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.dao"></property>
		<!-- 注入的是 SQLSessionFactory的Bean的名称 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- 事务 事务管理器 + AOP -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	
	<tx:advice id="txAdvice"  transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="account*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="*insert" propagation="REQUIRED" />
			<tx:method name="*update" propagation="REQUIRED" />
			<tx:method name="*delete" propagation="REQUIRED" />
		</tx:attributes>
	
	</tx:advice>
	
	
	
	<aop:config>
		<!-- 连接点 -->
		<aop:pointcut expression="execution(public * com.service.*.*(..))" id="serviceOperation"/>
		
		<!-- 通知   使用 advice-ref="txAdvice" advice-ref="txAdvice"引用定义好的   通知 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation"/>
	</aop:config>
	
	
</beans>